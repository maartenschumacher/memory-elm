var _user$project$Main$unsafeUnwrap = function (maybe) {
	var _p0 = maybe;
	if (_p0.ctor === 'Just') {
		return _p0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Main',
			{
				start: {line: 236, column: 5},
				end: {line: 241, column: 57}
			},
			_p0)('Maybe turned out to be nothing');
	}
};
var _user$project$Main$unsafeHead = function (list) {
	var _p2 = _elm_lang$core$List$head(list);
	if (_p2.ctor === 'Just') {
		return _p2._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Main',
			{
				start: {line: 226, column: 5},
				end: {line: 231, column: 38}
			},
			_p2)('Empty array');
	}
};
var _user$project$Main$extract = F2(
	function (index, array) {
		if ((_elm_lang$core$Native_Utils.cmp(index, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(
			index,
			_elm_lang$core$Array$length(array)) < 0)) {
			var suffix = A3(
				_elm_lang$core$Array$slice,
				index + 1,
				_elm_lang$core$Array$length(array),
				array);
			var element = _user$project$Main$unsafeUnwrap(
				A2(_elm_lang$core$Array$get, index, array));
			var prefix = A3(_elm_lang$core$Array$slice, 0, index, array);
			return {
				ctor: '_Tuple2',
				_0: element,
				_1: A2(_elm_lang$core$Array$append, prefix, suffix)
			};
		} else {
			return _elm_lang$core$Native_Utils.crash(
				'Main',
				{
					start: {line: 200, column: 9},
					end: {line: 200, column: 20}
				})('Index out of range');
		}
	});
var _user$project$Main$shuffle = F2(
	function (randomFloats, array) {
		if (_elm_lang$core$List$isEmpty(randomFloats) || _elm_lang$core$Array$isEmpty(array)) {
			return _elm_lang$core$Array$empty;
		} else {
			var _p4 = function () {
				var index = _elm_lang$core$Basics$floor(
					_user$project$Main$unsafeHead(randomFloats) * _elm_lang$core$Basics$toFloat(
						_elm_lang$core$Array$length(array)));
				var _p5 = A2(_user$project$Main$extract, index, array);
				var result = _p5._0;
				var newArray = _p5._1;
				return {
					ctor: '_Tuple3',
					_0: result,
					_1: A2(_elm_lang$core$List$drop, 1, randomFloats),
					_2: newArray
				};
			}();
			var result = _p4._0;
			var newRandomFloats = _p4._1;
			var newArray = _p4._2;
			return A2(
				_elm_lang$core$Array$push,
				result,
				A2(_user$project$Main$shuffle, newRandomFloats, newArray));
		}
	});
var _user$project$Main$id = F2(
	function (a, _p6) {
		return a;
	});
var _user$project$Main$pairs = function () {
	var $double = _elm_lang$core$List$concatMap(
		function (x) {
			return _elm_lang$core$Native_List.fromArray(
				[x, x]);
		});
	return function (_p7) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$Array$push,
			_elm_lang$core$Array$empty,
			$double(_p7));
	};
}();
var _user$project$Main$card = F2(
	function (pairId, imageSource) {
		return {imageSource: imageSource, turned: false, found: false, pairId: pairId};
	});
var _user$project$Main$mockData = _user$project$Main$pairs(
	A2(_elm_lang$core$List$indexedMap, _user$project$Main$card, _user$project$Assets$images));
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$isPair = F3(
	function (indexA, indexB, cards) {
		var getCard = function (index) {
			return _user$project$Main$unsafeUnwrap(
				A2(_elm_lang$core$Array$get, index, cards));
		};
		return _elm_lang$core$Native_Utils.eq(
			function (_) {
				return _.pairId;
			}(
				getCard(indexA)),
			function (_) {
				return _.pairId;
			}(
				getCard(indexB)));
	});
var _user$project$Main$updateCard = F3(
	function (turned, index, array) {
		var turn = function (card) {
			return _elm_lang$core$Native_Utils.update(
				card,
				{turned: turned});
		};
		var card = _user$project$Main$unsafeUnwrap(
			A2(_elm_lang$core$Array$get, index, array));
		return A3(
			_elm_lang$core$Array$set,
			index,
			turn(card),
			array);
	});
var _user$project$Main$turnCard = _user$project$Main$updateCard(true);
var _user$project$Main$unTurnCard = _user$project$Main$updateCard(false);
var _user$project$Main$increment = function ($int) {
	return $int + 1;
};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {cards: a, gameState: b};
	});
var _user$project$Main$Card = F4(
	function (a, b, c, d) {
		return {imageSource: a, turned: b, found: c, pairId: d};
	});
var _user$project$Main$Win = {ctor: 'Win'};
var _user$project$Main$Failed = F2(
	function (a, b) {
		return {ctor: 'Failed', _0: a, _1: b};
	});
var _user$project$Main$AfterGuessOne = function (a) {
	return {ctor: 'AfterGuessOne', _0: a};
};
var _user$project$Main$BeforeGuess = {ctor: 'BeforeGuess'};
var _user$project$Main$Initial = {ctor: 'Initial'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$UnTurn = {ctor: 'UnTurn'};
var _user$project$Main$unTurnCmd = A3(
	_elm_lang$core$Task$perform,
	_user$project$Main$id(_user$project$Main$NoOp),
	_user$project$Main$id(_user$project$Main$UnTurn),
	_elm_lang$core$Process$sleep(_elm_lang$core$Time$second));
var _user$project$Main$update = F2(
	function (msg, model) {
		var doNothing = {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		var _p8 = model.gameState;
		switch (_p8.ctor) {
			case 'Initial':
				var _p9 = msg;
				if (_p9.ctor === 'Shuffle') {
					return {
						ctor: '_Tuple2',
						_0: {
							cards: A2(_user$project$Main$shuffle, _p9._0, model.cards),
							gameState: _user$project$Main$BeforeGuess
						},
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return doNothing;
				}
			case 'BeforeGuess':
				var _p10 = msg;
				if (_p10.ctor === 'Turn') {
					var _p11 = _p10._0;
					return {
						ctor: '_Tuple2',
						_0: {
							cards: A2(_user$project$Main$turnCard, _p11, model.cards),
							gameState: _user$project$Main$AfterGuessOne(_p11)
						},
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return doNothing;
				}
			case 'AfterGuessOne':
				var _p14 = _p8._0;
				var _p12 = msg;
				if (_p12.ctor === 'Turn') {
					var _p13 = _p12._0;
					return A3(_user$project$Main$isPair, _p14, _p13, model.cards) ? {
						ctor: '_Tuple2',
						_0: {
							cards: A2(_user$project$Main$turnCard, _p13, model.cards),
							gameState: _user$project$Main$BeforeGuess
						},
						_1: _elm_lang$core$Platform_Cmd$none
					} : {
						ctor: '_Tuple2',
						_0: {
							cards: A2(_user$project$Main$turnCard, _p13, model.cards),
							gameState: A2(_user$project$Main$Failed, _p14, _p13)
						},
						_1: _user$project$Main$unTurnCmd
					};
				} else {
					return doNothing;
				}
			case 'Failed':
				var _p15 = msg;
				if (_p15.ctor === 'UnTurn') {
					return {
						ctor: '_Tuple2',
						_0: {
							cards: A3(
								_elm_lang$core$List$foldr,
								_user$project$Main$unTurnCard,
								model.cards,
								_elm_lang$core$Native_List.fromArray(
									[_p8._0, _p8._1])),
							gameState: _user$project$Main$BeforeGuess
						},
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return doNothing;
				}
			default:
				return doNothing;
		}
	});
var _user$project$Main$Turn = function (a) {
	return {ctor: 'Turn', _0: a};
};
var _user$project$Main$cardView = F2(
	function (index, card) {
		var action = (card.found || card.turned) ? _user$project$Main$NoOp : _user$project$Main$Turn(index);
		var buttonContent = card.turned ? _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$img,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$src(card.imageSource),
						_elm_lang$html$Html_Attributes$style(_user$project$Styles$image)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]) : _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(_user$project$Styles$image)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]);
		return A2(
			_elm_lang$html$Html$button,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Events$onClick(action)
				]),
			buttonContent);
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(_user$project$Styles$container)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h1,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('memory')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(_user$project$Styles$imageContainer)
					]),
				_elm_lang$core$Array$toList(
					A2(_elm_lang$core$Array$indexedMap, _user$project$Main$cardView, model.cards)))
			]));
};
var _user$project$Main$Shuffle = function (a) {
	return {ctor: 'Shuffle', _0: a};
};
var _user$project$Main$getRandomFloats = function (n) {
	return A2(
		_elm_lang$core$Random$generate,
		_user$project$Main$Shuffle,
		A2(
			_elm_lang$core$Random$list,
			n,
			A2(_elm_lang$core$Random$float, 0, 1)));
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A2(_user$project$Main$Model, _user$project$Main$mockData, _user$project$Main$Initial),
	_1: _user$project$Main$getRandomFloats(
		_elm_lang$core$Array$length(_user$project$Main$mockData))
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
